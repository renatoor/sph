#include <Corrade/Containers/Pointer.h>
#include <Corrade/Containers/Optional.h>

#include <Magnum/GL/Buffer.h>
#include <Magnum/GL/DefaultFramebuffer.h>
#include <Magnum/GL/Mesh.h>
#include <Magnum/GL/Renderer.h>

#include <Magnum/Math/Quaternion.h>
#include <Magnum/Math/Color.h>
#include <Magnum/Math/Matrix4.h>

#include <Magnum/MeshTools/Compile.h>
#include <Magnum/MeshTools/Interleave.h>
#include <Magnum/MeshTools/CompressIndices.h>

#include <Magnum/Platform/GlfwApplication.h>

#include <Magnum/Primitives/Cube.h>

#include <Magnum/Shaders/FlatGL.h>
#include <Magnum/Shaders/PhongGL.h>

#include <Magnum/SceneGraph/Camera.h>
#include <Magnum/SceneGraph/Drawable.h>
#include <Magnum/SceneGraph/MatrixTransformation3D.h>
#include <Magnum/SceneGraph/Scene.h>

#include <Magnum/Trade/MeshData.h>

#include <Magnum/ImGuiIntegration/Context.hpp>

#include "Objects/ArcBall.h"
#include "Objects/ArcBallCamera.h"
#include "Objects/WireframeObjects.h"

#include <Corrade/Utility/Debug.h>

using namespace Magnum;
using namespace Magnum::Math::Literals;

using Object3D = SceneGraph::Object<SceneGraph::MatrixTransformation3D>;
using Scene3D  = SceneGraph::Scene<SceneGraph::MatrixTransformation3D>;

class MainApplication: public Platform::Application {
    public:
        explicit MainApplication(const Arguments& arguments);

    private:
        void drawEvent() override;
        void drawGui();

        void setupScene();

        void viewportEvent(ViewportEvent& event) override;

        void keyPressEvent(KeyEvent& event) override;
        void keyReleaseEvent(KeyEvent& event) override;

        void mousePressEvent(MouseEvent& event) override;
        void mouseReleaseEvent(MouseEvent& event) override;
        void mouseMoveEvent(MouseMoveEvent& event) override;
        void mouseScrollEvent(MouseScrollEvent& event) override;

        void textInputEvent(TextInputEvent& event) override;

        ImGuiIntegration::Context _imgui{NoCreate};

        //Containers::Pointer<Scene3D> _scene;
        Scene3D _scene;
        Containers::Optional<ArcBallCamera> _arcballCamera;
        //Containers::Pointer<SceneGraph::DrawableGroup3D> _drawables;
        SceneGraph::DrawableGroup3D _drawables;

        //Containers::Pointer<WireframeBox> _box;

};

MainApplication::MainApplication(const Arguments& arguments):
    Platform::Application{arguments, Configuration{}
        .setTitle("SPH")
        .setWindowFlags(Configuration::WindowFlag::Resizable)}
{
    _imgui = ImGuiIntegration::Context(
            Vector2{windowSize()} / dpiScaling(),
            windowSize(),
            framebufferSize());

    GL::Renderer::setBlendEquation(GL::Renderer::BlendEquation::Add,
            GL::Renderer::BlendEquation::Add);
    GL::Renderer::setBlendFunction(GL::Renderer::BlendFunction::SourceAlpha,
            GL::Renderer::BlendFunction::OneMinusSourceAlpha);

    setupScene();

    GL::Renderer::enable(GL::Renderer::Feature::DepthTest);
    GL::Renderer::enable(GL::Renderer::Feature::FaceCulling);
}

void MainApplication::setupScene()
{
    //_scene.reset(new Scene3D{});

    //_drawables.reset(new SceneGraph::DrawableGroup3D{});

    const Vector3 eye = Vector3::zAxis(-10.0f);
    const Vector3 center{};
    const Vector3 up = Vector3::yAxis();

    _arcballCamera.emplace(_scene, eye, center, up, 45.0_degf, windowSize(), framebufferSize());

    /*
    _cameraObject->setTransformation(Matrix4::lookAt(Vector3(0.0f, 0.0f, 10.0f), _view, Vector3(0.0f, 1.0f, 0.0f)));

    _camera.reset(new SceneGraph::Camera3D{ *_cameraObject });
    _camera->setAspectRatioPolicy(SceneGraph::AspectRatioPolicy::Extend)
        .setProjectionMatrix(Matrix4::perspectiveProjection(35.0_degf, 4.0f / 3.0f, 0.001f, 100.0f))
        .setViewport(GL::defaultFramebuffer.viewport().size());
    */

    //_box.reset(new WireframeBox(&_scene, _drawables.get()));
    //_box->setColor(Color3(1, 1, 0));
}

void MainApplication::drawEvent() {
    GL::defaultFramebuffer.clear(GL::FramebufferClear::Color | GL::FramebufferClear::Depth);

    //drawGui();

    bool camChanged = _arcballCamera->update();
    _arcballCamera->draw(_drawables);

    swapBuffers();

    if (camChanged) redraw();
}

void MainApplication::drawGui()
{
    _imgui.newFrame();

    if (ImGui::GetIO().WantTextInput && !isTextInputActive()) {
        startTextInput();
    }
    else if (!ImGui::GetIO().WantTextInput && isTextInputActive()) {
        stopTextInput();
    }

    _imgui.updateApplicationCursor(*this);

    GL::Renderer::enable(GL::Renderer::Feature::Blending);
    GL::Renderer::enable(GL::Renderer::Feature::ScissorTest);
    GL::Renderer::disable(GL::Renderer::Feature::FaceCulling);
    GL::Renderer::disable(GL::Renderer::Feature::DepthTest);

    _imgui.drawFrame();

    GL::Renderer::enable(GL::Renderer::Feature::DepthTest);
    GL::Renderer::enable(GL::Renderer::Feature::FaceCulling);
    GL::Renderer::disable(GL::Renderer::Feature::ScissorTest);
    GL::Renderer::disable(GL::Renderer::Feature::Blending);
}


void MainApplication::viewportEvent(ViewportEvent& event) {
    GL::defaultFramebuffer.setViewport({{}, event.framebufferSize()});

    _imgui.relayout(Vector2{event.windowSize()}/event.dpiScaling(),
        event.windowSize(), event.framebufferSize());

    _arcballCamera->reshape(event.windowSize(), event.framebufferSize());
}

void MainApplication::keyPressEvent(KeyEvent& event) {
    _imgui.handleKeyPressEvent(event);

    switch(event.key()) {
        case KeyEvent::Key::L:
            if(_arcballCamera->lagging() > 0.0f) {
                Debug{} << "Lagging disabled";
                _arcballCamera->setLagging(0.0f);
            } else {
                Debug{} << "Lagging enabled";
                _arcballCamera->setLagging(0.85f);
            }
            break;
        case KeyEvent::Key::R:
            _arcballCamera->reset();
            break;

        default: return;
    }

    event.setAccepted();
    redraw();
}

void MainApplication::keyReleaseEvent(KeyEvent& event) {
    if(_imgui.handleKeyReleaseEvent(event)) return;
}

void MainApplication::mousePressEvent(MouseEvent& event) {
    _imgui.handleMousePressEvent(event);

    _arcballCamera->initTransformation(event.position());

    event.setAccepted();
    redraw();
}

void MainApplication::mouseReleaseEvent(MouseEvent& event) {
    if (_imgui.handleMouseReleaseEvent(event)) return;
}

void MainApplication::mouseMoveEvent(MouseMoveEvent& event) {
    _imgui.handleMouseMoveEvent(event);

    if(!event.buttons()) return;

    if(event.modifiers() & MouseMoveEvent::Modifier::Shift) {
        _arcballCamera->translate(event.position());
    }
    else {
        _arcballCamera->rotate(event.position());
    }

    event.setAccepted();
    redraw();
}

void MainApplication::mouseScrollEvent(MouseScrollEvent& event) {
    _imgui.handleMouseScrollEvent(event);

    const Float delta = event.offset().y();
    if(Math::abs(delta) < 1.0e-2f) return;

    _arcballCamera->zoom(delta);

    event.setAccepted();
    redraw();
}

void MainApplication::textInputEvent(TextInputEvent& event) {
    if(_imgui.handleTextInputEvent(event)) return;
}

MAGNUM_APPLICATION_MAIN(MainApplication)
